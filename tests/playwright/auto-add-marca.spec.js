// Test principal del flujo de auto-a√±adir marcas
// Este test replica exactamente el problema que est√°s teniendo

import { test, expect } from "@playwright/test";

test.describe("Auto-A√±adir Marcas - Flujo Principal", () => {
  test.beforeEach(async ({ page }) => {
    // Configurar interceptaci√≥n de console logs para ver errores JS
    page.on("console", (msg) => {
      console.log(`üü¶ BROWSER: [${msg.type().toUpperCase()}] ${msg.text()}`);
    });

    // Interceptar errores JavaScript
    page.on("pageerror", (error) => {
      console.log(`üî¥ JS ERROR: ${error.message}`);
    });

    // Ir a la aplicaci√≥n
    await page.goto("/");

    // Esperar a que cargue completamente
    await page.waitForSelector("#presupuesto-medida");
  });

  test("deber√≠a auto-a√±adir cuando hago click en sugerencia de marca", async ({ page }) => {
    console.log("üéØ TEST: Auto-a√±adir marca desde sugerencias");

    // PASO 1: Llenar medida para disparar sugerencias
    console.log("üìù PASO 1: Escribiendo medida...");
    await page.fill("#presupuesto-medida", "205/55/16");
    await page.press("#presupuesto-medida", "Tab"); // Disparar blur event

    // PASO 2: Esperar sugerencias de marcas
    console.log("‚è≥ PASO 2: Esperando sugerencias de marcas...");
    await page.waitForSelector("#precios-por-medida .chip", { timeout: 5000 });

    // PASO 3: Llenar campos b√°sicos requeridos
    console.log("üìù PASO 3: Llenando campos b√°sicos...");
    await page.fill("#presupuesto-cantidad", "2");
    await page.fill("#presupuesto-neto-temp", "62");

    // PASO 4: Verificar estado antes de click en marca
    console.log("üîç PASO 4: Verificando campos antes de seleccionar marca...");
    const medidaAntes = await page.inputValue("#presupuesto-medida");
    const cantidadAntes = await page.inputValue("#presupuesto-cantidad");
    const netoAntes = await page.inputValue("#presupuesto-neto-temp");

    console.log(`   Medida: "${medidaAntes}"`);
    console.log(`   Cantidad: "${cantidadAntes}"`);
    console.log(`   Neto: "${netoAntes}"`);

    // PASO 5: Seleccionar marca (esto deber√≠a auto-a√±adir)
    console.log("üéØ PASO 5: Seleccionando marca - DEBER√çA AUTO-A√ëADIR...");

    // Buscar chip con marca espec√≠fica
    const marcaChip = page
      .locator("#precios-por-medida .chip")
      .filter({
        hasText: /bridgestone|michelin|continental/i,
      })
      .first();

    // Verificar que existe la marca
    await expect(marcaChip).toBeVisible();
    const textoMarca = await marcaChip.textContent();
    console.log(`   üìå Seleccionando marca: "${textoMarca}"`);

    // CLICK en la marca - esto deber√≠a disparar auto-a√±adir
    await marcaChip.click();

    // PASO 6: Esperar a que se llene el campo marca
    console.log("‚è≥ PASO 6: Esperando a que se llene campo marca...");
    await page.waitForFunction(
      () => {
        const marca = document.getElementById("presupuesto-marca-temp");
        return marca && marca.value.length > 0;
      },
      { timeout: 3000 }
    );

    // PASO 7: Verificar estado despu√©s de seleccionar marca
    console.log("üîç PASO 7: Verificando campos despu√©s de seleccionar marca...");
    const medidaDespues = await page.inputValue("#presupuesto-medida");
    const cantidadDespues = await page.inputValue("#presupuesto-cantidad");
    const marcaDespues = await page.inputValue("#presupuesto-marca-temp");
    const netoDespues = await page.inputValue("#presupuesto-neto-temp");

    console.log(`   Medida: "${medidaDespues}" ${medidaDespues ? "‚úÖ" : "‚ùå"}`);
    console.log(`   Cantidad: "${cantidadDespues}" ${cantidadDespues ? "‚úÖ" : "‚ùå"}`);
    console.log(`   Marca: "${marcaDespues}" ${marcaDespues ? "‚úÖ" : "‚ùå"}`);
    console.log(`   Neto: "${netoDespues}" ${netoDespues ? "‚úÖ" : "‚ùå"}`);

    // VERIFICACIONES
    expect(medidaDespues).toBeTruthy();
    expect(cantidadDespues).toBeTruthy();
    expect(marcaDespues).toBeTruthy();
    expect(netoDespues).toBeTruthy();

    // PASO 8: Verificar si el bot√≥n manual existe y est√° habilitado
    console.log("üîç PASO 8: Verificando bot√≥n manual...");
    const botonManual = page.locator("#btnAgregarMarca");
    await expect(botonManual).toBeVisible();

    const botonHabilitado = await botonManual.isEnabled();
    console.log(`   üîò Bot√≥n habilitado: ${botonHabilitado ? "‚úÖ" : "‚ùå"}`);

    // PASO 9: Verificar si la funci√≥n handleAddMarca existe
    console.log("üîç PASO 9: Verificando funci√≥n handleAddMarca...");
    const funcionExiste = await page.evaluate(() => {
      return typeof window.handleAddMarca === "function";
    });
    console.log(`   üîß handleAddMarca existe: ${funcionExiste ? "‚úÖ" : "‚ùå"}`);

    // PASO 10: Intentar ejecutar auto-a√±adir manualmente si no funcion√≥
    if (funcionExiste) {
      console.log("üéØ PASO 10: Probando auto-a√±adir manualmente...");

      // Contar √≠tems antes
      const itemsAntes = await page.locator("#items-list .item").count();
      console.log(`   üìã √çtems antes: ${itemsAntes}`);

      // Ejecutar handleAddMarca directamente
      await page.evaluate(() => {
        window.handleAddMarca();
      });

      // Esperar un momento para que procese
      await page.waitForTimeout(1000);

      // Contar √≠tems despu√©s
      const itemsDespues = await page.locator("#items-list .item").count();
      console.log(`   üìã √çtems despu√©s: ${itemsDespues}`);

      // Verificar si se a√±adi√≥
      if (itemsDespues > itemsAntes) {
        console.log("üéâ ¬°AUTO-A√ëADIR FUNCION√ì!");
      } else {
        console.log("‚ùå Auto-a√±adir no funcion√≥");

        // Como √∫ltimo recurso, probar el bot√≥n manual
        console.log("üîß √öLTIMO RECURSO: Probando bot√≥n manual...");
        await botonManual.click();
        await page.waitForTimeout(1000);

        const itemsFinales = await page.locator("#items-list .item").count();
        console.log(`   üìã √çtems finales: ${itemsFinales}`);

        if (itemsFinales > itemsAntes) {
          console.log("‚úÖ Bot√≥n manual s√≠ funciona");
        } else {
          console.log("‚ùå Ni auto-a√±adir ni bot√≥n manual funcionan");
        }
      }
    }

    console.log("‚ú® TEST COMPLETADO");
  });

  test("deber√≠a mostrar errores de validaci√≥n si faltan campos", async ({ page }) => {
    console.log("üéØ TEST: Validaci√≥n de campos requeridos");

    // Llenar solo medida
    await page.fill("#presupuesto-medida", "205/55/16");
    await page.press("#presupuesto-medida", "Tab");

    // Esperar sugerencias
    await page.waitForSelector("#precios-por-medida .chip", { timeout: 5000 });

    // Seleccionar marca sin llenar otros campos
    const marcaChip = page.locator("#precios-por-medida .chip").first();
    await marcaChip.click();

    // Deber√≠a mostrar alg√∫n tipo de error o no a√±adir nada
    await page.waitForTimeout(2000);

    // Verificar que no se a√±adi√≥ al listado
    const items = await page.locator("#items-list .item").count();
    expect(items).toBe(0);

    console.log("‚úÖ Validaci√≥n funciona correctamente");
  });
});
