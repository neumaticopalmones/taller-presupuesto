name: Deploy to Render

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies (backend)
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov flake8

      - name: Lint with flake8
        run: |
          # Detener la compilaci√≥n si hay errores de sintaxis o nombres no definidos
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Salir con un warning en todo lo dem√°s
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Set up test environment
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          FLASK_ENV: testing
          FLASK_APP: backend.app:app
        run: |
          echo "DATABASE_URL=$DATABASE_URL"
          echo "FLASK_ENV=$FLASK_ENV"
          echo "FLASK_APP=$FLASK_APP"

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          FLASK_ENV: testing
          FLASK_APP: backend.app:app
        run: |
          python -m flask db upgrade

      - name: Test with pytest
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          FLASK_ENV: testing
          PYTHONPATH: ${{ github.workspace }}/backend
        run: |
          pytest tests/ -v --cov=backend --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to Render
        if: ${{ secrets.RENDER_API_KEY != '' && secrets.RENDER_SERVICE_ID != '' }}
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "üöÄ Deployando a Render..."
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Accept: application/json" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys"
          echo "‚úÖ Deploy iniciado en Render"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deploy exitoso a Render"
          else
            echo "‚ùå Deploy fall√≥"
          fi

  security-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Check for security vulnerabilities
        run: |
          safety check --json || true
          bandit -r . -f json || true
